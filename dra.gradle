
apply plugin: 'logstash-dra'

logstash {
  releaseName = "Logstash"
//  downloadName = "logstash"
//  releaseNotes = { String b, String v -> "https://www.elastic.co/guide/en/logstash/${b}/logstash-${v.replaceAll("\\.", "-")}.html" }
//
  Closure logstashArtifacts =  {
      generic = false

      // no-jdk artifacts
      tar dir:'build', name: 'logstash',     classifier: 'no-jdk', generic: true
      tar dir:'build', name: 'logstash-oss', classifier: 'no-jdk', generic: true, oss: true
      zip dir:'build', name: 'logstash',     classifier: 'no-jdk', generic: true
      zip dir:'build', name: 'logstash-oss', classifier: 'no-jdk', generic: true, oss: true
      deb dir:'build', name: 'logstash',     classifier: 'no-jdk', generic: true, include_in_repo: false
      deb dir:'build', name: 'logstash-oss', classifier: 'no-jdk', generic: true, oss: true, include_in_repo: false
      rpm dir:'build', name: 'logstash',     classifier: 'no-jdk', generic: true, include_in_repo: false
      rpm dir:'build', name: 'logstash-oss', classifier: 'no-jdk', generic: true, oss: true, include_in_repo: false

      // x86_64
      tar dir:'build', name: 'logstash',     architecture: 'x86_64', os: ['linux']
      tar dir:'build', name: 'logstash-oss', architecture: 'x86_64', os: ['linux'], oss: true
      tar dir:'build', name: 'logstash',     architecture: 'x86_64', os: ['darwin']
      tar dir:'build', name: 'logstash-oss', architecture: 'x86_64', os: ['darwin'], oss: true
      zip dir:'build', name: 'logstash',     architecture: 'x86_64', os: ['windows']
      zip dir:'build', name: 'logstash-oss', architecture: 'x86_64', os: ['windows'], oss: true
      deb dir:'build', name: 'logstash',     architecture: 'amd64'
      deb dir:'build', name: 'logstash-oss', architecture: 'amd64', oss: true
      rpm dir:'build', name: 'logstash',     architecture: 'x86_64'
      rpm dir:'build', name: 'logstash-oss', architecture: 'x86_64', oss: true

      // arm64
      tar dir:'build', name: 'logstash',     architecture: 'aarch64', os: ['linux']
      tar dir:'build', name: 'logstash-oss', architecture: 'aarch64', os: ['linux'], oss: true
      tar dir:'build', name: 'logstash',     architecture: 'aarch64', os: ['darwin']
      tar dir:'build', name: 'logstash-oss', architecture: 'aarch64', os: ['darwin'], oss: true
      deb dir:'build', name: 'logstash',     architecture: 'arm64'
      deb dir:'build', name: 'logstash-oss', architecture: 'arm64',   oss: true
      rpm dir:'build', name: 'logstash',     architecture: 'aarch64'
      rpm dir:'build', name: 'logstash-oss', architecture: 'aarch64', oss: true

      docker dir: '.', repo: 'docker.elastic.co', org: 'logstash', name: 'logstash', classifier: 'docker-image', architecture: 'x86_64'
      docker dir: '.', repo: 'docker.elastic.co', org: 'logstash', name: 'logstash-oss', classifier: 'docker-image', architecture: 'x86_64'
      docker dir: '.', repo: 'docker.elastic.co', org: 'logstash', name: 'logstash-ubi8', classifier: 'docker-image', architecture: 'x86_64'
      docker dir: "build", name: 'logstash', classifier: 'docker-build-context'
      docker dir: "build", name: 'logstash-oss', classifier: 'docker-build-context'
      docker dir: "build", name: 'logstash-ubi8', classifier: 'docker-build-context'
      docker dir: "build", name: 'logstash-ironbank', classifier: 'docker-build-context'
  }
//
//  Closure logstashArmArtifacts =  {
//      generic = false
//      docker dir: '.', repo: 'docker.elastic.co', org: 'logstash', name: 'logstash', classifier: 'docker-image', architecture: 'aarch64'
//      docker dir: '.', repo: 'docker.elastic.co', org: 'logstash', name: 'logstash-oss', classifier: 'docker-image', architecture: 'aarch64'
//  }
//
//  // Artifact set configuration for use from logstash-ci.
//  artifactSet('main') {
//    artifacts(logstashArtifacts)
//    artifacts(logstashArmArtifacts)
//    artifacts {
//      csvDependencyReport dir: 'build/distributions', name: 'dependencies'
//    }
//  }
//
  String buildArgs = ""
  if (versionQualifier) {
    buildArgs = "VERSION_QUALIFIER=${versionQualifier}"
  }

  localBuild('local') {
    buildSnapshotCommands = [
      'export JAVA_HOME="$HOME/.java/adoptopenjdk11"',
      'export LS_JAVA_HOME="$HOME/.java/adoptopenjdk11"',
//      'export JAVA_HOME="/home/andrea/.sdkman/candidates/java/11.0.15-tem/"',
//      'export LS_JAVA_HOME="/home/andrea/.sdkman/candidates/java/11.0.15-tem/"',
      'export PATH=$HOME/.rbenv/shims:$PATH', // Logstash build use rbenv but rbenv shims aren't in jenkins user PATH
      "${buildArgs} rake artifact:all",
      'bin/dependencies-report --csv=$DEPENDENCIES_REPORTS_DIR/$DEPENDENCIES_REPORT'
    ]
    buildReleaseCommands = [
      'export JAVA_HOME="$HOME/.java/adoptopenjdk11"',
      'export LS_JAVA_HOME="$HOME/.java/adoptopenjdk11"',
      'export PATH=$HOME/.rbenv/shims:$PATH', // Logstash build use rbenv but rbenv shims aren't in jenkins user PATH
      "${buildArgs} RELEASE=1 rake artifact:all",
      'bin/dependencies-report --csv=$DEPENDENCIES_REPORTS_DIR/$DEPENDENCIES_REPORT'
    ]

//    artifacts(logstashArtifacts)
  }

  localBuild('aarch64') {
    buildSnapshotCommands = [
            'export JAVA_HOME="$HOME/.java/adoptopenjdk11"',
            'export LS_JAVA_HOME="$HOME/.java/adoptopenjdk11"',
            'export PATH=$PATH:/opt/jruby/jruby-9.1.12.0/bin',
            "${buildArgs} rake artifact:docker",
            "${buildArgs} rake artifact:docker_oss",
            "${buildArgs} rake artifact:dockerfiles",
            'bin/dependencies-report --csv=$DEPENDENCIES_REPORTS_DIR/$DEPENDENCIES_REPORT'
    ]
    buildReleaseCommands = [
            'export JAVA_HOME="$HOME/.java/adoptopenjdk11"',
            'export LS_JAVA_HOME="$HOME/.java/adoptopenjdk11"',
            'export PATH=$PATH:/opt/jruby/jruby-9.1.12.0/bin',
            "${buildArgs} RELEASE=1 rake artifact:docker",
            "${buildArgs} RELEASE=1 rake artifact:docker_oss",
            "${buildArgs} rake artifact:dockerfiles",
            'bin/dependencies-report --csv=$DEPENDENCIES_REPORTS_DIR/$DEPENDENCIES_REPORT'
    ]

    statusMessages = [
            '[bootstrap]' : 'bootstrapping dependencies',
            '[plugin:install-default]' : 'fetching plugins',
            '[artifact:' : 'building distributions'
    ]

//    artifacts(logstashArmArtifacts)
  }
}
